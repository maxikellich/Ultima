import {
  script as script5,
  script2 as script6
} from "./chunk-V2UJ4HEM.js";
import {
  script as script2
} from "./chunk-UPL7ZWM7.js";
import {
  script as script3
} from "./chunk-IFJG3IQY.js";
import {
  script as script4
} from "./chunk-4URSUE2S.js";
import {
  Ripple
} from "./chunk-LZBKQNPO.js";
import {
  script
} from "./chunk-UPDUPPEN.js";
import {
  Transition,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  mergeProps,
  openBlock,
  renderSlot,
  resolveComponent,
  resolveDirective,
  resolveDynamicComponent,
  vShow,
  withCtx,
  withDirectives
} from "./chunk-J6475X5X.js";

// node_modules/primevue/message/message.esm.js
var script7 = {
  name: "Message",
  extends: script,
  emits: ["close"],
  props: {
    severity: {
      type: String,
      default: "info"
    },
    closable: {
      type: Boolean,
      default: true
    },
    sticky: {
      type: Boolean,
      default: true
    },
    life: {
      type: Number,
      default: 3e3
    },
    icon: {
      type: String,
      default: void 0
    },
    closeIcon: {
      type: String,
      default: void 0
    },
    closeButtonProps: {
      type: null,
      default: null
    }
  },
  timeout: null,
  data() {
    return {
      visible: true
    };
  },
  mounted() {
    if (!this.sticky) {
      this.closeAfterDelay();
    }
  },
  methods: {
    close(event) {
      this.visible = false;
      this.$emit("close", event);
    },
    closeAfterDelay() {
      setTimeout(() => {
        this.visible = false;
      }, this.life);
    }
  },
  computed: {
    containerClass() {
      return "p-message p-component p-message-" + this.severity;
    },
    iconComponent() {
      return {
        info: script6,
        success: script2,
        warn: script5,
        error: script3
      }[this.severity];
    },
    closeAriaLabel() {
      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.close : void 0;
    }
  },
  directives: {
    ripple: Ripple
  },
  components: {
    TimesIcon: script4,
    InfoCircleIcon: script6,
    CheckIcon: script2,
    ExclamationTriangleIcon: script5,
    TimesCircleIcon: script3
  }
};
var _hoisted_1 = ["aria-label"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_TimesIcon = resolveComponent("TimesIcon");
  const _directive_ripple = resolveDirective("ripple");
  return openBlock(), createBlock(Transition, {
    name: "p-message",
    appear: ""
  }, {
    default: withCtx(() => [
      withDirectives(createBaseVNode("div", mergeProps({
        class: $options.containerClass,
        role: "alert",
        "aria-live": "assertive",
        "aria-atomic": "true"
      }, _ctx.ptm("root")), [
        createBaseVNode("div", mergeProps({ class: "p-message-wrapper" }, _ctx.ptm("wrapper")), [
          renderSlot(_ctx.$slots, "messageicon", { class: "p-message-icon" }, () => [
            (openBlock(), createBlock(resolveDynamicComponent($props.icon ? "span" : $options.iconComponent), mergeProps({
              class: ["p-message-icon", $props.icon]
            }, _ctx.ptm("icon")), null, 16, ["class"]))
          ]),
          createBaseVNode("div", mergeProps({ class: "p-message-text" }, _ctx.ptm("text")), [
            renderSlot(_ctx.$slots, "default")
          ], 16),
          $props.closable ? withDirectives((openBlock(), createElementBlock("button", mergeProps({
            key: 0,
            class: "p-message-close p-link",
            "aria-label": $options.closeAriaLabel,
            type: "button",
            onClick: _cache[0] || (_cache[0] = ($event) => $options.close($event))
          }, { ...$props.closeButtonProps, ..._ctx.ptm("button") }), [
            renderSlot(_ctx.$slots, "closeicon", { class: "p-message-close-icon" }, () => [
              $props.closeIcon ? (openBlock(), createElementBlock("i", mergeProps({
                key: 0,
                class: ["p-message-close-icon", $props.closeIcon]
              }, _ctx.ptm("buttonIcon")), null, 16)) : (openBlock(), createBlock(_component_TimesIcon, mergeProps({
                key: 1,
                class: "p-message-close-icon"
              }, _ctx.ptm("buttonIcon")), null, 16))
            ])
          ], 16, _hoisted_1)), [
            [_directive_ripple]
          ]) : createCommentVNode("", true)
        ], 16)
      ], 16), [
        [vShow, $data.visible]
      ])
    ]),
    _: 3
  });
}
function styleInject(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z = "\n.p-message-wrapper {\n    display: flex;\n    align-items: center;\n}\n.p-message-close {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.p-message-close.p-link {\n    margin-left: auto;\n    overflow: hidden;\n    position: relative;\n}\n.p-message-enter-from {\n    opacity: 0;\n}\n.p-message-enter-active {\n    transition: opacity 0.3s;\n}\n.p-message.p-message-leave-from {\n    max-height: 1000px;\n}\n.p-message.p-message-leave-to {\n    max-height: 0;\n    opacity: 0;\n    margin: 0 !important;\n}\n.p-message-leave-active {\n    overflow: hidden;\n    transition: max-height 0.3s cubic-bezier(0, 1, 0, 1), opacity 0.3s, margin 0.15s;\n}\n.p-message-leave-active .p-message-close {\n    display: none;\n}\n";
styleInject(css_248z);
script7.render = render;

export {
  script7 as script
};
//# sourceMappingURL=chunk-OBOEBZTR.js.map
